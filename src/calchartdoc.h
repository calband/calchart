/*
 * CalChartDoc.h
 * Definitions for the wxDoc for calchart shows
 */

/*
   Copyright (C) 1995-2011  Garrick Brian Meeker, Richard Michael Powell

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef _CALCHARTDOC_H_
#define _CALCHARTDOC_H_

#include "animate.h"

#include <wx/wx.h>							  // For basic wx defines
#include <wx/docview.h>							  // For basic wx defines

#include <boost/shared_ptr.hpp>
#include <vector>
#include <set>

class CC_sheet;
class ShowMode;
class ShowUndoList;
class CC_show;
class CC_lasso;
class Animation;

/**
 * A message sent to CalChart views to inform them that the doc has been modified.
 */
class CalChartDoc_modified : public wxObject
{
DECLARE_DYNAMIC_CLASS(CalChartDoc_modified)
};

/**
 * A message sent to CalChart views in which the user edits text to make sure that
 * any edited text is saved.
 */
class CalChartDoc_FlushAllViews : public wxObject
{
DECLARE_DYNAMIC_CLASS(CalChartDoc_FlushAllViews)
};

/**
 * A message sent to CalChart views to inform them that a new file has been loaded.
 */
class CalChartDoc_FinishedLoading : public wxObject
{
	DECLARE_DYNAMIC_CLASS(CalChartDoc_FinishedLoading)
};

/**
 * A message sent to CalChart views to inform them that the user would like to set
 * up a new show.
 */
class CalChartDoc_setup : public wxObject
{
DECLARE_DYNAMIC_CLASS(CalChartDoc_setup)
};


/**
 * A CalChart document. It contains all data about a show, and can be saved/opened/edited.
 */
class CalChartDoc : public wxDocument
{
	DECLARE_DYNAMIC_CLASS(CalChartDoc)
public:
	typedef std::vector<CC_sheet> CC_sheet_container_t;
	typedef CC_sheet_container_t::iterator CC_sheet_iterator_t;
	typedef CC_sheet_container_t::const_iterator const_CC_sheet_iterator_t;

	/**
	 * Creates a new CalChart document. 
	 */
	CalChartDoc();

	/** 
	 * Cleanup. 
	 */
	virtual ~CalChartDoc();

	/**
	 * A method called when a show file is opened by CalChart.
	 * The CalChartDoc overrides this method so that it can report any error that
	 * occurs while handling the file, and so that it can handle the recovery file.
	 * @param filename The name of the file to open.
	 * @return TODO
	 */
	virtual bool OnOpenDocument(const wxString& filename);

	/**
	* A method called when the document is closed.
	* The CalChartDoc overrides this method so that it can report any error that
	* occurs while handling the file, and so that it can handle the recovery file.
	* @return TODO
	*/
	virtual bool OnCloseDocument();


	/**
	* A method that is called when a new file is created.
	* This starts the setup wizard.
	* @return TODO
	*/
	virtual bool OnNewDocument();


	/**
	* A method called when a show file is saved by CalChart.
	* The CalChartDoc overrides this method so that it can handle the show's
	* recovery files.
	* @param filename The name of the file to which the show will be saved.
	* @return TODO
	*/
	virtual bool OnSaveDocument(const wxString& filename);

	/**
	* A method that is called when the user makes a change that would affect how
	* the CalChart show is saved to a file.
	* When the doc is modified, all of its views are notified of the modification.
	* @param b True to indicate that the doc, overall, has been modified since the
	* last time it was saved; false otherwise. Because many actions can be undone/redone,
	* the user may undo all changes made to the document since the last save, and in this
	* case, Modify(false) should be called to indicate that, overall, no change has
	* been made to the document.
	*/
	virtual void Modify(bool b);

	// How we save and load a show:
#if wxUSE_STD_IOSTREAM
	
	/**
	 * Saves the show to an output stream, which is used to generate a show file.
	 * This is called thought the OnSaveDocument(...) method.
	 * @param stream The output stream that will be used to output data to a file.
	 * @return The output stream that was used to output data to a file.
	 */
    virtual wxSTD ostream& SaveObject(wxSTD ostream& stream);

	/**
	* Loads a show from an input stream, which was generated by reading a file.
	* This is called thought the OnOpenDocument(...) method.
	* @param stream An input stream that will be used to recreate a saved show.
	* @return The input stream that was used to recreate a saved show.
	*/
    virtual wxSTD istream& LoadObject(wxSTD istream& stream);
#else
	/**
	* Saves the show to an output stream, which is used to generate a show file.
	* This is called thought the OnSaveDocument(...) method.
	* @param stream The output stream that will be used to output data to a file.
	* @return The output stream that was used to output data to a file.
	*/
    virtual wxOutputStream& SaveObject(wxOutputStream& stream);

	/**
	* Loads a show from an input stream, which was generated by reading a file.
	* This is called thought the OnOpenDocument(...) method.
	* @param stream An input stream that will be used to recreate a saved show.
	* @return The input stream that was used to recreate a saved show.
	*/
    virtual wxInputStream& LoadObject(wxInputStream& stream);
#endif
private:
	/**
	 * Loads a show from an input stream.
	 * @param T The type of input stream.
	 * @param stream The input stream.
	 * @return The input stream used to load the show.
	 */
	template <typename T>
	T& LoadObjectGeneric(T& stream);
	/**
	* Saves the show to an output stream. This first makes
	* sure that the show is ready to save itself.
	* @param T The type of output stream.
	* @param stream The output stream.
	* @return The output stream to which the show was saved.
	*/
	template <typename T>
	T& SaveObjectGeneric(T& stream);
	/**
	* Saves the show to an output stream. This assumes that
	* the show is ready to save itself.
	* @param T The type of output stream.
	* @param stream The output stream.
	* @return The output stream to which the show was saved.
	*/
	template <typename T>
	T& SaveObjectInternal(T& stream);

public:

	wxString ImportContinuity(const wxString& file);

	/**
	 * Saves the changes to each of the text windows.
	 * That includes windows like the Continuity Editor.
	 */
	void FlushAllTextWindows();
	
	/**
	 * Makes an animation of the show.
	 * @return A pointer to an animation of the show.
	 */
	boost::shared_ptr<Animation> NewAnimation(NotifyStatus notifyStatus, NotifyErrorList notifyErrorList);
	/**
	 * Sets up a show that has just been created.
	 * This adds a first stunt sheet to the show.
	 */
	void SetupNewShow();
	
	/**
	 * Returns the description of the show.
	 * @return The show discription.
	 */
	const std::string& GetDescr() const;
	/**
	 * Sets the show description.
	 * @return The new show description.
	 */
	void SetDescr(const std::string& newdescr);

	/**
	 * Returns the number of stunt sheets in the show.
	 * @return The number of stunt sheets in the show.
	 */
	unsigned short GetNumSheets() const;

	/**
	 * Returns an iterator that will iterate through all of the stunt sheets
	 * and is initially positioned at the first stunt sheet.
	 * @return An iterator positioned on the first stunt sheet.
	 */
	CC_sheet_iterator_t GetSheetBegin();
	/**
	 * Returns an iterator that will iterate through all of the stunt sheets
	 * and is initially positioned at the first stunt sheet.
	 * @return An iterator positioned on the first stunt sheet.
	 */
	const_CC_sheet_iterator_t GetSheetBegin() const;
	/**
	 * Returns an iterator that will iterate through all of the stunt sheets
	 * and is initially positioned at the first stunt sheet.
	 * @return An iterator positioned on the first stunt sheet.
	 */
	CC_sheet_iterator_t GetSheetEnd();
	/**
	 * Returns an iterator that will iterate through all of the stunt sheets
	 * and is initially positioned at the first stunt sheet.
	 * @return An iterator positioned on the first stunt sheet.
	 */
	const_CC_sheet_iterator_t GetSheetEnd() const;
	/**
	  * Returns an iterator that will iterate through all of the stunt sheets
	  * and is initially positioned at a specific stunt sheet.
	  * @param n the index of the stunt sheet to start the iterator at.
	  * @return An iterator positioned on the nth stunt sheet.
	  */
	const_CC_sheet_iterator_t GetNthSheet(unsigned n) const;
	/**
	 * Returns an iterator that will iterate through all of the stunt sheets
	 * and is initially positioned at a specific stunt sheet.
	 * @param n the index of the stunt sheet to start the iterator at.
	 * @return An iterator positioned on the nth stunt sheet.
	 */
	CC_sheet_iterator_t GetNthSheet(unsigned n);
	/**
	 * Returns an iterator that will iterate through all of the stunt sheets
	 * and is initially positioned at the currently active stunt sheet.
	 * @return An iterator positioned at the current stunt sheet.
	 */
	const_CC_sheet_iterator_t GetCurrentSheet() const;
	/**
	 * Returns an iterator that will iterate through all of the stunt sheets
	 * and is initially positioned at the currently active stunt sheet.
	 * @return An iterator positioned at the current stunt sheet.
	 */
	CC_sheet_iterator_t GetCurrentSheet();
	/**
	 * Returns the index associated with the currently active stunt sheet.
	 * @return The index of the current sheet.
	 */
	unsigned GetCurrentSheetNum() const;
	/**
	 * Jumps to a stunt sheet with a particular index.
	 * @param n The index of the sheet to jump to.
	 */
	void SetCurrentSheet(unsigned n);

	/**
	 * Removes a stunt sheet from the show.
	 * @param sheetidx The index of the sheet to remove.
	 * @return The sheet that was removed.
	 * TODO Memory leak?
	 */
	CC_sheet_container_t RemoveNthSheet(unsigned sheetidx);
	/**
	 * TODO Unused?
	 */
	void DeleteNthSheet(unsigned sheetidx);
	/**
	 * Inserts a stunt sheet into the show at a particular index.
	 * @param nsheet The sheet to insert.
	 * @param sheetidx The index that the sheet will have in the show after
	 * insertion. If there is another stunt sheet at that index before the
	 * insertion, then that stunt sheet, and its successors, will be moved
	 * after the inserted sheet.
	 */
	void InsertSheetInternal(const CC_sheet& nsheet, unsigned sheetidx);
	/**
	 * Inserts a set of stunt sheets into the show at a particular index.
	 * @param nsheet An iterator that iterates through all of the sheets to insert.
	 * @param sheetidx The index which the first inserted sheet will have after the
	 * insertion is complete. If another stunt sheet exists at that index prior to
	 * insertaion, that stuntsheet and all of its successors will be moved after
	 * the inserted sheets.
	 */
	void InsertSheetInternal(const CC_sheet_container_t& nsheet, unsigned sheetidx);
	/**
	 * Inserts a stunt sheet into the show at a particular index.
	 * @param nsheet The sheet to insert.
	 * @param sheetidx The index that the sheet will have in the show after
	 * insertion. If there is another stunt sheet at that index before the
	 * insertion, then that stunt sheet, and its successors, will be moved
	 * after the inserted sheet.
	 */
	void InsertSheet(const CC_sheet& nsheet, unsigned sheetidx);
	/**
	 * Returns the number of points present in the show.
	 * @return The number of points present in the show.
	 */
	unsigned short GetNumPoints() const;
	/**
	 * Sets the number of points in the show, as well as the number of columns into
	 * which those points whould initially be arranged.
	 * @param num The number of points for the show.
	 * @param columns The number of columns to arrange the points into.
	 */
	void SetNumPoints(unsigned num, unsigned columns);
	/**
	 * Browses through all sheets following a specified sheet in the show, relabeling
	 * the points to match the labels used at the specified sheet.
	 * A specified sheet becomes a reference for the rest of the show. If the following
	 * sheet has an identical formation, but different labels on the points in that
	 * formation, then the labels for each of those points are mapped to the labels of
	 * the points in the reference sheet located in identical spots in the formation. Whenever
	 * a point appears throughout the rest of the show, it will be relabelled
	 * according to its corresponding label on the reference sheet.
	 * @return True if the operation is successful; false otherwise.
	 */
	bool RelabelSheets(unsigned sht);

	/**
	 * Returns the label of the point with a particular index.
	 * @param i The index of the point.
	 * @return The label of the point with index i.
	 */
	std::string GetPointLabel(unsigned i) const;
	/**
	 * Sets the labels for all points.
	 * @param labels The list of labels to assign to all points.
	 */
	void SetPointLabel(const std::vector<std::string>& labels);
	/**
	 * Returns a list containing the labels for all points.
	 * @return A list containing labels for all points.
	 */
	const std::vector<std::string>& GetPointLabels() const;

	// how to select points:
	// Always select or unselect in groups
	/**
	 * Selects all points.
	 * @return True if a change was made in the selection; false
	 * otherwise (e.g. when all points were already selected).
	 */
	bool SelectAll();
	/**
	 * Deselects all points.
	 * @return True if a change was made in the selection; false
	 * otherwise (e.g. when all points were already unselected).
	 */
	bool UnselectAll();
	/**
	 * Adds a list of points to the active point selection.
	 * @param sl The list of points to select.
	 */
	void AddToSelection(const SelectionList& sl);
	/**
	 * Sets the active selection to the specified selection.
	 * @param sl The new selection to use.
	 */
	void SetSelection(const SelectionList& sl);
	/**
	 * Removes a set of points from the active point selection.
	 * @param sl A list of points to remove from the selection.
	 */
	void RemoveFromSelection(const SelectionList& sl);
	/**
	 * Toggles whether or not a particular set of points are selected.
	 * @param sl The list of points to toggle between selected and
	 * unsselected.
	 */
	void ToggleSelection(const SelectionList& sl);
	/**
	 * Adjusts the active selection based on the points within a lasso.
	 * @param laso The lasso that contains the points that may be added/removed from
	 * the selection.
	 * @param toggleSelected True if the points in the lasso should be toggled between
	 * selected and unselected; else, if false, the points in the lasso will be
	 * selected.
	 * @param ref The index of the reference point that should be used for each point
	 * when deciding if points are located within the lasso or not.
	 */
	void SelectWithLasso(const CC_lasso& lasso, bool toggleSelected, unsigned ref);
	/**
	 * Returns whether or not a particular point is selected.
	 * @param i The index of the point to check.
	 * @return True if the point is selected; false otherwise.
	 */
	bool IsSelected(unsigned i) const;
	/**
	 * Returns the list of points that are currently selected.
	 * @return The list of points that are currently selected.
	 */
	const SelectionList& GetSelectionList() const;

	/**
	 * Returns the current show mode being used for this show.
	 * @return The show mode for this show.
	 */
	const ShowMode& GetMode() const;
	/**
	 * Sets the show mode that will be used for this show.
	 * @param m The show mode to use for this show.
	 */
	void SetMode(const ShowMode* m);

private:
	// Autosaving:
	// goal is to allow the user to have a recoverable file.
	// 
	// When the timer goes off, and if the show is modified,
	// we will write the file to a version of the file that the same
	// but with the extension .shw~, to indicate that there is a recovery
	// file at that location.
	// When a file is opened, we first check to see if there is a temporary 
	// file, and if there is, prompt the user to see if they would like use
	// that file instead.
	// When we save a file, the recovery file should be removed to prevent
	// a false detection that the file writing failed.
	/**
	 * Returns the name that an autosave file associated with this document
	 * would have, if present.
	 * @return The name that an autosave file associated with this document
	 * would have.
	 */
	static wxString TranslateNameToAutosaveName(const wxString& name);
	/**
	 * Saves the document to a recovery file.
	 */
	void Autosave();
	
	/**
	 * A timer that alerts the CalChartDoc when it should autosave.
	 */
	class AutoSaveTimer: public wxTimer
	{
	public:
		/**
		 * Makes the timer.
		 * @param show The document to autosave periodically.
		 */
		AutoSaveTimer(CalChartDoc& show) : mShow(show) {}
		/**
		 * Autosaves the CalChartDoc. This method is called when the
		 * time is right.
		 */
		void Notify();
	private:
		/**
		 * The document to autosave periodically.
		 */
		CalChartDoc& mShow;
	};

	/**
	 * Commands have direct access to the CalChartDoc.
	 */
	friend class BasicCalChartCommand;
	/**
	 * Returns a snapshot of the state of the show, as it is right now.
	 * @return A snapshot of the current state of the show.
	 */
	CC_show ShowSnapShot() const;
	/**
	 * Restores the show to an earlier snapshot of it.
	 * @param snapshot The snapshot of the show to restore.
	 */
	void RestoreSnapShot(const CC_show& snapshot);
	
	/**
	 * The show which this document is responsible for.
	 */
	std::unique_ptr<CC_show> mShow;
	/**
	 * The active show mode for the current show.
	 */
	const ShowMode* mMode;
	/**
	 * The timer that makes sure that the document is periodically autosaved.
	 */
	AutoSaveTimer mTimer;
};

#endif // _CALCHARTDOC_H_
