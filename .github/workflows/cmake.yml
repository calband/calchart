# much of this inspired from: https://cristianadam.eu/20191222/using-github-actions-with-c-plus-plus-and-cmake/
# and also the excellent series from:
# https://www.edwardthomson.com/blog/github_actions_advent_calendar.html
name: CI action for CalChart

on:
  push:
    branches:
    - main
  pull_request:
    branches:
    - main

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest GCC",
            artifact: "CalChart.tar.xz",
            os: ubuntu-latest,
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
          }
        - {
            name: "macOS Latest Clang",
            artifact: "CalChart-*.dmg",
            os: macos-latest,
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
          }
        - {
            name: "Windows Latest MSVC",
            artifact: "CalChart-*.exe",
            os: windows-latest,
            build_type: "Release",
            cc: "cl",
            cxx: "cl",
          }

    steps:
    - name: checkout
      uses: actions/checkout@v2

    - name: Checkout unshallow
      run: git fetch --unshallow

    - name: Checkout submodules
      run: git submodule update --init --recursive

    - name: Installing Dependencies (Windows)
      if: matrix.config.os == 'windows-latest'
      run: choco install winflexbison

    - name: Installing Dependencies (Linux)
      if: matrix.config.os == 'ubuntu-latest'
      run: sudo apt-get update && sudo apt-get install build-essential libgtk-3-dev

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
 
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Run tests
      run: ctest --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Pack (macOS)
      if: matrix.config.os == 'macos-latest'
      run: pushd ${{github.workspace}}/build && cpack -G DragNDrop

    - name: Pack (Windows)
      if: matrix.config.os == 'windows-latest'
      run: pushd ${{github.workspace}}/build && cpack

    - name: Strip (Linux)
      if: matrix.config.os == 'ubuntu-latest'
      run: cmake --install build --prefix instdir --strip
    
    - name: Pack (Linux)
      if: matrix.config.os == 'ubuntu-latest'
      working-directory: instdir
      run: cmake -E tar cJfv ${{github.workspace}}/build/CalChart.tar.xz .
    
    - name: Upload
      uses: actions/upload-artifact@v2
      with:
        path: ${{github.workspace}}/build/${{ matrix.config.artifact }}

  release:
    if: contains(github.ref, 'tags/v')
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.0.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Store Release url
      run: |
        echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url

    - uses: actions/upload-artifact@v2
      with:
        path: ./upload_url
        name: upload_url

  publish:
    if: contains(github.ref, 'tags/v')
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
        - {
            name: "Ubuntu Latest GCC",
            artifact: "CalChart.tar.xz",
            os: ubuntu-latest
          }
        - {
            name: "macOS Latest Clang",
            artifact: "CalChart-*.dmg",
            os: ubuntu-latest
          }
        # CI for Windows doesn't seem functional.  Need to investigate, (see https://github.com/calband/calchart/issues/363)
        - {
            name: "Windows Latest MSVC",
            artifact: "CalChart-*.exe",
            os: ubuntu-latest
          }
    needs: release

    steps:
    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: ${{ matrix.config.artifact }}
        path: ./

    - name: Download URL
      uses: actions/download-artifact@v2
      with:
        name: upload_url
        path: ./
    - id: set_upload_url
      run: |
        upload_url=`cat ./upload_url`
        echo ::set-output name=upload_url::$upload_url

    - name: Upload to Release
      id: upload_to_release
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
        asset_path: ./${{ matrix.config.artifact }}
        asset_content_type: application/x-gtar
