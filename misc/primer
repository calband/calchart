
Calchart v3 Introduction

Version 3 will have essentially the same capabilities as version 2.  However,
the user interface has been completely restructured to facilitate use.
Also, many new features have been added, but they are mostly nothing more
than shortcuts for common tasks.  To fully understand the logic of the new
interface, it is necessary to grasp a few new abstract concepts.

Underlined words are definitions.  Any defined word is always used in the
literal technical sense.  The list of defined words is: group, collection,
section, order, animation order, associate, current group, and current
stuntsheet.

Groups

A _group_ is a collection of points on the field counting multiplicity.
"Counting multiplicity" means that more than one point can occupy an identical
location on the field without causing any ambiguities.  Other than location,
there is no additional data associated with each point.  Information about
label, symbol, and continuity instructions are stored elsewhere.

Stuntsheets and refptsheets are by far the most common examples of groups.
In fact, it is very uncommon for any other kind of group to be necessary.
However, it occasionally does happen; in these situations, it is best to
solicit the help of an "expert." (Dan Isaksen, Gurk Meeker, et al.)  For most
practical purposes, there is no danger in mentally limiting the concept
of group to apply only to stuntsheets and refptsheets.

The group consisting of the men on stuntsheet 13 will be simply denoted as 
"13," and "15R2" will denote the second refptsheet for stuntsheet 15.

Collections

A _collection_ C is a bunch of sets of points.  For each group g, there is a
set of points C(g) which is a subset of g.  Recall that g itself is a set
of points, so it makes sense to call C(g) a subset of g.  C(g) is called the
_section_ of C associated to g.  The term "section" is not meant to reflect
the idea of an instrument section such as mellophones.

Symbols are actually collections.  For example, for each stuntsheet N,
let Plain(N) be the set of men on stuntsheet N that are plainmen.  For
example, Plain(13) is the set of all men that appear as plainmen on
stuntsheet 13.  Observe that Plain(13) is a subset of the set of points of
the group "stuntsheet 13".  Therefore, Plain is a collection whose sections
correspond to those men that appear as plainmen on each stuntsheet.

Strictly speaking, Plain is also defined for all refptsheets and all other
groups.  However, the value of Plain(13R1) is generally inconsequential
since it will not be printed anyway.

Note that it is perfectly reasonable
for a section of Plain (or of any other collection) to be the empty set for
some or all groups.  This empty set situation actually occurs when a
particular symbol, say Solidbackslash, is not used on a particular stuntsheet,
say 9.  In this case, Solidbackslash(9) is the empty set.

Generally speaking, each point of a group lies in exactly one section of
one of the symbol collections.  This means that each man has exactly one and
only one symbol on any given stuntsheet.  However, this does not have to be
the case, and the program has the capability of assigning more than one
symbol to a man by allowing the sections of different symbols to overlap on
a particular group.  Moreover, it is possible for a man to have no symbol at
all by allowing a point of a group to lie in no section of any symbol group.

Labels are another example of collections.  Usually, each section of a label
collection consists of exactly one point.  For example, 69(5) is the point
that is labelled 69 on stuntsheet 5, and B0(20R3) is the third reference
point of man B0 on stuntsheet 20.

As in the case of symbols, each point of a group generally lies in one and
only one section of a label collection.  However, this does not have to be
the case.  As above, it is perfectly reasonable (although of doubtful use)
to have a man with more than one label or to have a man without any label
at all.

Yet another common example of collections consists of special continuity
assignment.  From time to time, a flow (say on stuntsheet 34)
is designed that can be explained
easily to humans but is hard to explain to the program.  So, specific
continuity instructions must be given to small sets of men.  These sets
are defined by making them the sections corresponding to group 34 of
special user-created collections (call one Special).  Generally speaking,
Special(n) will be empty for all n other than 34, but the specific value
of Special(33) is not consequential since it will never be referred to.
However, clever users will realize that there are times when it is quite
effective to use Special as a meaningful collection on more than one
stuntsheet.

User-defined collections are particularly helpful in tracking particular
bodies of bandsmen throughout a show.  For example, it may be helpful to
see the basses section or the percussion section highlighted in a special
color during animation.  In order to do this, the user must define a
collection (Basses) such that Basses(n) is equal to the men on stuntsheet n
that are bass players.  The Basses collection can be fairly easily created
using the tools for collection manipulation provided by the program; it is
not necessary to define each section on each group by hand.  Now, the
user can select the Basses collection to be highlighted during animation.

Orders

The _order_ of a show is a sequence of some of the groups of a show.  Note
that the order does not necessarily contain all groups.  A _stuntsheet_
is a group that appears in the order.  All other groups (such as refpt
sheets) are NOT stuntsheets and do not appear in the order.

The order is used by several aspects of the program.  When the user selects
Nextsheet or Previoussheet, the program follows the order to determine
which group is actually next or previous.  The animation follows the order.
The order can be changed with the Movesheets command.

Stuntsheets are considered by the program to be
the "most important" groups.  For example, when the user selects Goto, a
list of groups will appear, from which the user must choose the new group to
be edited.  Initially, the program only lists the names of stuntsheets
because it is most likely that the user will want to go to a stuntsheet.
However, it is possible to see a list of all groups on request.

Associations

Each sheet of reference points is meant to be used in connection with a
particular stuntsheet.  This is reflected in the nomenclature: 12R1 is a
refptsheet tied to stuntsheet 12.

Any group can be _associated_ to a particular stuntsheet (as usual,
here "stuntsheet" means
a member of the order).  Generally speaking, each refptsheet is associated
to one stuntsheet in a natural way.  It is very uncommon to need any other
kind of association.  However, it is possible to associate an arbitrary
group to an arbitrary stuntsheet, regardless of name.

It is possible for a group to be associated to no stuntsheet.  For example,
a user-defined group (not a stuntsheet or a refptsheet) is generally 
unassociated.  Of course, it is possible for more than one group to be
associated to the same stuntsheet; in other words, it is possible for a
stuntsheet to have more than one set of reference points.
It is even possible (although of doubtful use) for
a single group to be associated to more than one stuntsheet.

The program uses associations as a way of trying to predict what information
the user is most likely to need at any given time.
For example, when the user chooses
onionskin, a list of groups appears.  The user must choose a group, which
then will appear in the "background" of the viewscreen.  Initially, the
list displays only the associated groups to the current stuntsheet because
these groups are most likely to be wanted by the user.  However, it is
possible to see the full list of groups if desired.

Current groups

At any given time, there is one particular group that is _current_.  It is
the group that is being displayed onscreen.  Most commands such as
individualmove, clevermove, geniusmove, labelflip, or symbolchange will
always be applied only to the current group.

The current group is often
used by the program in predicting a default value.  For example, if the
users selects Removegroup, a list of groups will appear.  The user must
choose the name of a group that will be erased.  If the user does not
actively choose a name, the the program will assume that the user wants
to erase the current group.

If the current group is associated to some stuntsheet, then this stuntsheet
is the _current_stuntsheet_.  For example, if the user is editing the
fourth reference point for stuntsheet 19, then the current group is 13R4,
and the current stuntsheet is 13.  If the current group is unassociated,
then there is no current stuntsheet.

Like the current group and associated groups, the current stuntsheet is used by
the program to predict what information the user is likely to need at any
given time.
